{
	"repository": "MEKA",
	"include": ["../mlplan/autoweka.json"],
	"parameters": [
		/* Sets the downsampling ratio default: 0.75 (of original) */
		{
			"name": "_P",
			"type": "double",
			"default": 0.75,
			"min": 0.1,
			"max": 0.99,
			"refineSplits": 2,
			"minInterval": 0.05
		},
		/* Determines the width of the trellis (use 0 for chain; use _1 for a square trellis, i.e., width of sqrt(number of labels)). */
		{
			"name": "_H",
			"type": "cat",
			"default": 0,
			"values": [0, -1]
		},
		/* Determines the neighbourhood density (the number of neighbours for each node in the trellis). CAUTION: default obtained from source code. No idea about good other values */
		{
			"name": "_L",
			"type": "int",
			"default": 1,
			"min": 1,
			"max": 5,
			"minInterval": 1,
			"refineSplits": 2
		},
		/* The dependency heuristic to use in rearranging the trellis (None by default). */
		{
			"name": "_X",
			"type": "cat",
			"default": "None",
			"values": ["None"]
		},
		/* The total number of iterations. default: 1000 */
		{
			"name": "_I",
			"type": "cat",
			"default": 1000,
			"values": [100, 1000, 10000, 20000]
		},
		/* The number of collection iterations. default: 100 */
		{
			"name": "_Ic",
			"type": "cat",
			"default": 100,
			"values": [50, 100, 200, 500, 1000]
		}
	],
	"components": [
		{
			"name": "meka.classifiers.multilabel.BCC",
			"providedInterface": ["MLClassifier", "BasicMLClassifier"],
			"requiredInterface": ["Classifier"],
			"parameter": [
				/* The way to measure dependencies. default: lbf (frequencies only) */
				{
					"name": "_X",
					"type": "cat",
					"default": "lbf",
					"values": [ "lbf" ]
				}
			]
		},
		{
			"name": "meka.classifiers.multilabel.BPNN",
			"providedInterface": ["MLClassifier", "BasicMLClassifier"],
			"requiredInterface": ["Classifier"],
			"parameter": [
				/* Sets the number of hidden units default: 10 */
				{
					"name": "_H", 
					"type": "int",
					"default": "10",
					"min": "1",
					"max": "100",
					"refineSplits": 4,
					"minInterval": 2
				},
				/* Sets the maximum number of epochs default: 1000 (auto_cut_out) */
				{
					"name": "_E",
					"type": "int",
					"default": 1000,
					"min": 100,
					"max": 10000,
					"refineSplits": 2,
					"minInterval": 100
				},
				/* Sets the learning rate (tyically somewhere between 'very small' and 0.1) default: 0.1 */
				{
					"name": "_r",
					"type": "double",
					"default": 0.1,
					"min": 1E-5,
					"max": 0.1,
					"refineSplits": 2,
					"minInterval": 1E-5
				},
				/* Sets the momentum (typically somewhere between 0.1 and 0.9) default: 0.1 */
				{
					"name": "_m",
					"type": "double",
					"default": 0.1,
					"min": 0.1,
					"max": 0.9,
					"refineSplits": 2,
					"minInterval": 0.05
				}
			]
		},
		{
			"name": "meka.classifiers.multilabel.BR",
			"providedInterface": ["MLClassifier", "BasicMLClassifier", "meka.classifiers.multilabel.BR"],
			"requiredInterface": ["Classifier"],
			"parameter": [
				/* No parameters to optimize */
			]
		},
		{
			"name": "meka.classifiers.multilabel.BRq",
			"providedInterface": ["MLClassifier", "BasicMLClassifier"],
			"requiredInterface": ["Classifier"],
			"parameter": [
				/* Sets the downsampling ratio default: 0.75 (% of original) */
				{
					"name": "_P"
				}
			]
		},
		{
			"name": "meka.classifiers.multilabel.CC",
			"providedInterface": ["MLClassifier", "BasicMLClassifier"],
			"requiredInterface": ["Classifier"],
			"parameter": [
				/* No parameters to optimize */
			]
		},
		{
			"name": "meka.classifiers.multilabel.CCq",
			"providedInterface": ["MLClassifier", "BasicMLClassifier"],
			"requiredInterface": ["Classifier"],
			"parameter": [
				{
					"name": "_P"
				}
			]
		},
		{
			"name": "meka.classifiers.multilabel.CDN",
			"providedInterface": ["MLClassifier", "BasicMLClassifier"],
			"requiredInterface": ["Classifier"],
			"parameter": [
				/* The total number of iterations. default: 1000 */
				{
					"name": "_I"
				},
				/* The number of collection iterations. default: 100 */
				{
					"name": "_Ic"
				}
			]
		},
		{
			"name": "meka.classifiers.multilabel.CDT",
			"providedInterface": ["MLClassifier", "BasicMLClassifier"],
			"requiredInterface": ["Classifier"],
			"parameter": [
				/* Determines the width of the trellis (use 0 for chain; use _1 for a square trellis, i.e., width of sqrt(number of labels)). */
				{
					"name": "_H"
				},
				/* Determines the neighbourhood density (the number of neighbours for each node in the trellis). CAUTION: no default found */
				{
					"name": "_L"
				},
				/* The dependency heuristic to use in rearranging the trellis (None by default). */
				{
					"name": "_X"
				},
				{
					"name": "_I"
				},
				{
					"name": "_Ic"
				}
			]
		},
		{
			"name": "meka.classifiers.multilabel.CT",
			"providedInterface": ["MLClassifier", "BasicMLClassifier"],
			"requiredInterface": ["Classifier"],
			"parameter": [
				/* Determines the width of the trellis (use 0 for chain; use _1 for a square trellis, i.e., width of sqrt(number of labels)). */
				{
					"name": "_H"
				},
				/* Determines the neighbourhood density (the number of neighbours for each node in the trellis). CAUTION: no default found */
				{
					"name": "_L"
				},
				/* The dependency heuristic to use in rearranging the trellis (None by default). */
				{
					"name": "_X"
				},
				{
					"name": "_I"
				},
				{
					"name": "_Ic"
				},
				/* Sets the payoff function. Any of those listed in regular evaluation output will do (e.g., 'Exact match'). default: Exact match */
				{
					"name": "_P",
					"type": "cat",
					"default": "Exact match",
					"values": ["Exact match"]
				}
			]
		},
		{
			"name": "meka.classifiers.multilabel.DBPNN",
			"providedInterface": ["MLClassifier", "BasicMLClassifier"],
			"requiredInterface": ["Classifier"],
			"parameter": [
				{
					"name": "_N",
					"type": "int",
					"default": 2,
					"min": 1,
					"max": 10,
					"minInterval": 1,
					"refineSplits": 2
				},
				/* Sets the number of hidden units default: 10 */
				{
					"name": "_H", 
					"type": "cat",
					"default": 10,
					"values": [ 5, 10, 20, 50 ]
				},
				/* Sets the maximum number of epochs default: 1000 (auto_cut_out) */
				{
					"name": "_E",
					"type": "int",
					"default": 1000,
					"min": 100,
					"max": 10000,
					"refineSplits": 2,
					"minInterval": 100
				},
				/* Sets the learning rate (tyically somewhere between 'very small' and 0.1) default: 0.1 */
				{
					"name": "_r",
					"type": "double",
					"default": 0.1,
					"min": 1E-5,
					"max": 0.1,
					"refineSplits": 2,
					"minInterval": 1E-5
				},
				/* Sets the momentum (typically somewhere between 0.1 and 0.9) default: 0.1 */
				{
					"name": "_m",
					"type": "double",
					"default": 0.1,
					"min": 0.1,
					"max": 0.9,
					"refineSplits": 2,
					"minInterval": 0.05
				}
			]
		},
		{
			"name": "meka.classifiers.multilabel.FW",
			"providedInterface": ["MLClassifier", "BasicMLClassifier"],
			"requiredInterface": ["Classifier"],
			"parameter": [
				
			]
		},
		{
			"name": "meka.classifiers.multilabel.HASEL",
			"providedInterface": ["MLClassifier", "BasicMLClassifier"],
			"requiredInterface": ["Classifier"],
			"parameter": [
				/* LEFT OUT: _k  The number of labels in each partition __ should be 1 <= k < (L/2) where L is the total number of labels.*/
				/* Sets the pruning value, defining an infrequent labelset as one which occurs <= P times in the data (P = 0 defaults to LC). default: 0 (LC) */
				{
					"name": "_P",
					"type": "int",
					"default": 0,
					"min": 0,
					"max": 10,
					"minInterval": 1,
					"refineSplits": 2
				}
				/* LEFT OUT: _N  Sets the (maximum) number of frequent labelsets to subsample from the infrequent labelsets. default: 0 (none) n N = n _n N = n, or 0 if LCard(D) >= 2 n_m N = random(n,m).*/
			]
		},
		{
			"name": "meka.classifiers.multilabel.LC",
			"providedInterface": ["MLClassifier", "BasicMLClassifier"],
			"requiredInterface": ["Classifier"],
			"parameter": [
				/* No parameters to optimize */
			]
		},
		{
			"name": "meka.classifiers.multilabel.MajorityLabelset",
			"providedInterface": ["MLClassifier", "BasicMLClassifier"],
			"requiredInterface": [],
			"parameter": [
				/* No parameters to optimize */
			]
		},
		{
			"name": "meka.classifiers.multilabel.MCC",
			"providedInterface": ["MLClassifier", "BasicMLClassifier"],
			"requiredInterface": ["Classifier"],
			"parameter": [
				/* The number of iterations to search the chain space at train time. default: 0*/
				{
					"name": "_Is",
					"type": "int",
					"default": 0,
					"min": 0,
					"max": 10,
					"minInterval": 1,
					"refineSplits": 2
				},
				/* The number of iterations to search the output space at test time. default: 10*/
				{
					"name": "_Iy",
					"type": "int",
					"default": 10,
					"min": 0,
					"max": 20,
					"minInterval": 1,
					"refineSplits": 2
				},
				/* Sets the payoff function. Any of those listed in regular evaluation output will do (e.g., 'Exact match'). default: Exact match */
				{
					"name": "_P",
					"type": "cat",
					"default": "Exact match",
					"values": ["Exact match"]
				}
			]
		},
		{
			"name": "meka.classifiers.multilabel.PCC",
			"providedInterface": ["MLClassifier", "BasicMLClassifier"],
			"requiredInterface": ["Classifier"],
			"parameter": [
				
			]
		},
		{
			"name": "meka.classifiers.multilabel.PMCC",
			"providedInterface": ["MLClassifier", "BasicMLClassifier"],
			"requiredInterface": ["Classifier"],
			"parameter": [
				/* The population size (of chains) __ should be smaller than the total number of chains evaluated (Is) default: 10 */
				{
					"name": "_M",
					"type": "int",
					"default": 10,
					"min": 1,
					"max": 20,
					"minInterval": 1,
					"refineSplits": 2
				},
				/* Use temperature: cool the chain down over time (from the beginning of the chain) __ can be faster default: 0 (no temperature) */
				{
					"name": "_O",
					"type": "int",
					"default": 0,
					"min": 0,
					"max": 10,
					"minInterval": 1,
					"refineSplits": 2
				},
				/* If using O = 1 for temperature, this sets the Beta constant default: 0.03 */
				{
					"name": "_B",
					"type": "double",
					"default": 0.03,
					"min": 0,
					"max": 0.1,
					"minInterval": 1E-3,
					"refineSplits": 2
				},
				/* The number of iterations to search the chain space at train time. default: 0 */
				{
					"name": "_Is",
					"type": "int",
					"default": 50,
					"min": 20,
					"max": 100,
					"minInterval": 5,
					"refineSplits": 2
				},
				/* The number of iterations to search the output space at test time. default: 10 */
				{
					"name": "_Iy",
					"type": "int",
					"default": 10,
					"min": 0,
					"max": 20,
					"minInterval": 1,
					"refineSplits": 2
				},
				/* Sets the payoff function. Any of those listed in regular evaluation output will do (e.g., 'Exact match'). default: Exact match */
				{
					"name": "_P",
					"type": "cat",
					"default": "Exact match",
					"values": ["Exact match"]
				}
			]
		},
		{
			"name": "meka.classifiers.multilabel.PS",
			"providedInterface": ["MLClassifier", "BasicMLClassifier"],
			"requiredInterface": ["Classifier"],
			"parameter": [
				/* Sets the pruning value, defining an infrequent labelset as one which occurs <= P times in the data (P = 0 defaults to LC). default: 0 (LC) */
				{
					"name": "_P",
					"type": "int",
					"default": 0,
					"min": 0,
					"max": 10,
					"minInterval": 1,
					"refineSplits": 2
				}
				/* LEFT OUT: _N  Sets the (maximum) number of frequent labelsets to subsample from the infrequent labelsets. default: 0 (none) n N = n _n N = n, or 0 if LCard(D) >= 2 n_m N = random(n,m).*/
			]
		},
		{
			"name": "meka.classifiers.multilabel.PSt",
			"providedInterface": ["MLClassifier", "BasicMLClassifier"],
			"requiredInterface": ["Classifier"],
			"parameter": [
				/* Sets the pruning value, defining an infrequent labelset as one which occurs <= P times in the data (P = 0 defaults to LC). default: 0 (LC) */
				{
					"name": "_P",
					"type": "int",
					"default": 0,
					"min": 0,
					"max": 10,
					"minInterval": 1,
					"refineSplits": 2
				}
				/* LEFT OUT: _N  Sets the (maximum) number of frequent labelsets to subsample from the infrequent labelsets. default: 0 (none) n N = n _n N = n, or 0 if LCard(D) >= 2 n_m N = random(n,m).*/
			]
		},
		{
			"name": "meka.classifiers.multilabel.RAkEL",
			"providedInterface": ["MLClassifier", "BasicMLClassifier"],
			"requiredInterface": ["Classifier"],
			"parameter": [
				/* Sets M (default 10): the number of subsets */
				{
					"name": "_M",
					"type": "int",
					"min": 2,
					"max": 20,
					"default": 10,
					"refineSplits": 2,
					"minInterval": 1
				},
				/* LEFT OUT: _k  The number of labels in each partition __ should be 1 <= k < (L/2) where L is the total number of labels.*/
				/* Sets the pruning value, defining an infrequent labelset as one which occurs <= P times in the data (P = 0 defaults to LC). default: 0 (LC) */
				{
					"name": "_P",
					"type": "int",
					"default": 0,
					"min": 0,
					"max": 10,
					"minInterval": 1,
					"refineSplits": 2
				}
				/* LEFT OUT: _N  Sets the (maximum) number of frequent labelsets to subsample from the infrequent labelsets. default: 0 (none) n N = n _n N = n, or 0 if LCard(D) >= 2 n_m N = random(n,m).*/
			]
		},
		{
			"name": "meka.classifiers.multilabel.RAkELd",
			"providedInterface": ["MLClassifier", "BasicMLClassifier"],
			"requiredInterface": ["Classifier"],
			"parameter": [
				/* LEFT OUT: _k  The number of labels in each partition __ should be 1 <= k < (L/2) where L is the total number of labels.*/
				/* Sets the pruning value, defining an infrequent labelset as one which occurs <= P times in the data (P = 0 defaults to LC). default: 0 (LC) */
				{
					"name": "_P",
					"type": "int",
					"default": 0,
					"min": 0,
					"max": 10,
					"minInterval": 1,
					"refineSplits": 2
				}
				/* LEFT OUT: _N  Sets the (maximum) number of frequent labelsets to subsample from the infrequent labelsets. default: 0 (none) n N = n _n N = n, or 0 if LCard(D) >= 2 n_m N = random(n,m).*/
			]
		},
		{
			"name": "meka.classifiers.multilabel.RT",
			"providedInterface": ["MLClassifier", "BasicMLClassifier"],
			"requiredInterface": ["Classifier"],
			"parameter": [
				
			]
		}
	]
}